# ------------------  INPUTS TO MAIN PROGRAM  -------------------
max_step = 5000
stop_time = 1.E-4

# PROBLEM SIZE & GEOMETRY
geometry.is_periodic = 0 0 0
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical
geometry.prob_lo     =  0. 0. 0.
geometry.prob_hi     = 0.4 2.8 0.4
amr.n_cell           = 32 224 32

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
pelec.lo_bc        = "Hard" "NoSlipWall" "Hard"
pelec.hi_bc        = "Hard" "NoSlipWall" "Hard"

# WHICH PHYSICS
pelec.do_hydro = 1
pelec.diffuse_vel = 1
pelec.diffuse_temp = 1
pelec.diffuse_enth = 1
pelec.diffuse_spec = 1
pelec.do_react = 0
pelec.do_grav = 0
pelec.allow_negative_energy = 1

# TIME STEP CONTROL
pelec.cfl            = 0.8    # cfl number for hyperbolic system
pelec.init_shrink    = 1.     # scale back initial timestep
pelec.change_max     = 1.1     # max time step growth
pelec.dt_cutoff      = 5.e-20  # level 0 timestep below which we halt


# DIAGNOSTICS & VERBOSITY
pelec.sum_interval   = -1   # timesteps between computing mass
pelec.v              = 0   # verbosity in Castro.cpp
amr.v                = 1    # verbosity in Amr.cpp
#amr.data_log         = datlog
#amr.grid_log         = grdlog  # name of grid logging file

# REFINEMENT / REGRIDDING 
amr.max_level       = 2       # maximum level number allowed

# Use fixed refinement base on an initial grid file
#amr.initial_grid_file = gridfile
#amr.regrid_int      = -1 -1 -1 # how often to regrid

# Use adaptive refinement based on temperature gradients
#tagging.tempgrad = 1.3
# Use adaptive refinement based on velocity gradients
tagging.velgrad = 40.
amr.regrid_int = 8 8 8

amr.ref_ratio       = 2 2 2 2 # refinement ratio
amr.blocking_factor = 16       # block factor in grid generation
amr.max_grid_size   = 32
amr.n_error_buf     = 2 2 2 2 # number of buffer cells in error est

# PARTICLES / SPRAY
pelec.do_spray_particles = 1
particles.v = 0
particles.mom_transfer = 1
particles.mass_transfer = 1
particles.heat_transfer = 1
# Set so that SprayParticleInitInsert.cpp is used to initialize
particles.particle_init_function = 1
particles.write_spray_ascii_files = 0

particles.fuel_species = NC10H22
# properties for decane
particles.fuel_crit_temp = 617.8 # K
particles.fuel_boil_temp = 447.27 # K
particles.fuel_ref_temp = 298.15
particles.fuel_latent = 3.5899E9
particles.fuel_cp = 2.1921E7 # Cp at 298 K

# CHECKPOINT FILES
amr.checkpoint_files_output = 0
amr.check_file      = chk  # root name of checkpoint file
amr.check_int       = -1   # number of timesteps between checkpoints

# PLOTFILES
#amr.plot_files_output = 0
amr.plot_file       = plt # root name of plotfile
amr.plot_per        = 1.E-7 # number of timesteps between plotfiles
amr.plot_vars = density Temp rho_E xmom ymom eden rho_O2 rho_N2 rho_NC10H22
amr.derive_plot_vars = x_velocity y_velocity pressure   # these variables appear in the plotfile
amr.file_name_digits = 6

# PROBLEM
# Initial fluid properties
prob.ref_T = 440.
prob.ref_p = 6.E7
prob.init_v = 0.
prob.init_N2 = 1.
prob.init_O2 = 0.

# Jet properties
prob.jet_dia = 9.E-3
prob.spray_angle_deg = 21.

# Properties of injected particles
prob.part_rho = 0.693
prob.part_temp = 363.
# Log-normal distribution of particle diameters
# Mean particle diameter
prob.part_mean_dia = 9.E-4
# Standard deviation of the particle diameter
prob.part_stdev_dia = 5.E-5

# Mass flow rate and velocity can be interpolated
# from data table
prob.inject_file = references/roi.dat

# Or specified as constant
# prob.jet_start_time = 0.
# prob.jet_end_time = 1.54E-3
# prob.jet_vel = 6.E4
# prob.mass_flow_rate = 2.3